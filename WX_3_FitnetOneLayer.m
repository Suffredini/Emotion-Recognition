
%Lo script testa le reti con i neuroni nell hidden layer indicati dal for e
% crea due variabili dove indica il numero di neuroni della rete che ha
% avuto un valore di regression maggiore relativamente ad all
PerformanceNeuron = 0;
PerformanceTest = 4.5;
PerformanceRegression = 0;
testMode = true; %true per stampare pop up della rete che scende sotto la soglia
bayes = true;

for repeat = 1:20 % Quante volte ripetere 
    w = false;
    z=repeat
    for i = 25:25 % Pool di neuroni nascosti da testare
        % Solve an Input-Output Fitting problem with a Neural Network
        % Script generated by Neural Fitting app
        % Created 15-Aug-2019 16:15:15
        %
        % This script assumes these variables are defined:
        %
        %   arousalFeaturesSelect - input data.
        %   arousalTarget - target data.
% 
%         x = arousalInput';
%         t = arousalTargetBalanced';
        x = valenceInput';
        t = valenceTargetBalanced';

        %trainFcn = 'trainlm';  % Levenberg-Marquardt backpropagation.
        %trainFcn = 'trainbr';  
        %trainFcn = 'trainscg';  
        
        if bayes == true
           trainFcn = 'trainbr';
        else
            trainFcn = 'trainlm';
        end   

        % Create a Fitting Network
        hiddenLayerSize = i;
        net = fitnet(hiddenLayerSize,trainFcn);
        if testMode == false
            net.trainParam.showWindow = 0; %<= Nasconde il pop-up !!!!!!!!!!!!!!!!!!!!!!!
        end

        % Choose Input and Output Pre/Post-Processing Functions
        % For a list of all processing functions type: help nnprocess
        net.input.processFcns = {'removeconstantrows','mapminmax'};
        net.output.processFcns = {'removeconstantrows','mapminmax'};

        % Setup Division of Data for Training, Validation, Testing
        % For a list of all data division functions type: help nndivision
        net.divideFcn = 'dividerand';  % Divide data randomly
        net.divideMode = 'sample';  % Divide up every sample
       
        if bayes == true
            net.divideParam.trainRatio = 70/100;
            net.divideParam.testRatio = 30/100;
        else
            net.divideParam.trainRatio = 70/100;
            net.divideParam.valRatio = 15/100;
            net.divideParam.testRatio = 15/100;
        end            

        % Choose a Performance Function
        % For a list of all performance functions type: help nnperformance
        net.performFcn = 'mse';  % Mean Squared Error

        % Choose Plot Functions
        % For a list of all plot functions type: help nnplot
        net.plotFcns = {'plotperform','plottrainstate','ploterrhist', ...
            'plotregression', 'plotfit'};

        % Train the Network
        [net,tr] = train(net,x,t);

        % Test the Network
        y = net(x);
        e = gsubtract(t,y);
        performance = perform(net,t,y);


        % Recalculate Training, Validation and Test Performance
        trainTargets = t .* tr.trainMask{1};
        valTargets = t .* tr.valMask{1};
        testTargets = t .* tr.testMask{1};
        trainPerformance = perform(net,trainTargets,y);
        valPerformance = perform(net,valTargets,y);
        testPerformance = perform(net,testTargets,y);

        % View the Network
        %view(net)

        % Plots
        % Uncomment these lines to enable various plots.
        %figure, plotperform(tr)
        %figure, plottrainstate(tr)
        %figure, ploterrhist(e)
        %figure, plotregression(t,y)
        %figure, plotfit(net,x,t)

        % Deployment
        % Change the (false) values to (true) to enable the following code blocks.
        % See the help for each generation function for more information.
        if (false)
            % Generate MATLAB function for neural network for application
            % deployment in MATLAB scripts or with MATLAB Compiler and Builder
            % tools, or simply to examine the calculations your trained neural
            % network performs.
            genFunction(net,'myNeuralNetworkFunction');
            y = myNeuralNetworkFunction(x);
        end
        if (false)
            % Generate a matrix-only MATLAB function for neural network code
            % generation with MATLAB Coder tools.
            genFunction(net,'myNeuralNetworkFunction','MatrixOnly','yes');
            y = myNeuralNetworkFunction(x);
        end
        if (false)
            % Generate a Simulink diagram for simulation or deployment with.
            % Simulink Coder tools.
            gensim(net);
        end
        % Tiene traccia della migliore rete
        tmpTestPerformance = perform(net,testTargets,y)
        if tmpTestPerformance < PerformanceTest
            if testMode == true
                w = true;
                break;
            else
           
                PerformanceNeuron = i;
                 PerformanceTest = tmpTestPerformance;
                 [r,m,b] = regression(t,y); 
                 PerformanceRegression = r;
                PerformanceNet = net;
                trTmp = tr;
                tTmp = t;
                yTmp = y;
                xTmp = x;
                eTmp = e;     
            end
        end

    end
    if testMode == true && w == true
        break;
    end
end
if testMode == false 
    figure, plotperform(tr)
    %figure, plottrainstate(tr)
    figure, ploterrhist(e)
    figure, plotregression(t,y)
    %figure, plotfit(net,x,t)
end

clear w z trTmp tTmp yTmp xTmp eTmp repeat net r m b valTargets x y testPerformance valPerformance trainFcn testTargets performance t  hiddenLayerSize  e tr trainTargets trainPerformance ;
